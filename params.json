{"name":"ConfigMapper","tagline":"Simple .NET config to object mapping","body":"## Turn this... \r\n``` var mySetting = ConfigurationManager.AppSettings[\"MySetting\"]; ```\r\n## ...into this:\r\n```var mySetting = Configuration.AppSettings.MySetting; ```\r\n\r\n* Supports mapping from **appSettings**, **connectionStrings** and **environment variables**.\r\n* No magic strings - avoid run-time errors from typos.\r\n* Provides interfaced configuration objects, allowing your strongly-typed ```IConfiguration``` to be injected anywhere in a unit-testable manner.\r\n* Refactor-friendly - renaming settings is simple.\r\n* Find usages easily.\r\n\r\n### Install from [NuGet](https://www.nuget.org/packages/ConfigMapper)\r\n\r\n```\r\nPM> Install-Package ConfigMapper\r\n```\r\n\r\n#### Usage is simple. \r\n\r\n```\r\nusing ConfigMapping;\r\n```\r\n```\r\npublic interface IAppSettings\r\n{\r\n    string KeyInAppSettings { get; }\r\n    decimal WorksWithManyTypes { get; }\r\n    MyEnum AlsoWorksWithEnums { get; }\r\n}\r\n```\r\n```\r\nIAppSettings configuration = ConfigMapper.Map<IAppSettings>();\r\n```\r\n\r\nConfigure your DI to inject ```IAppSettings``` using the Map method into any class. The code above assumes we defined ```MyEnum``` somewhere and we have our config file as:\r\n```\r\n<appSettings>\r\n  <add key=\"KeyInAppSettings\" value=\"Foo\"/>\r\n  <add key=\"WorksWithManyTypes\" value=\"42.0\"/>\r\n  <add key=\"AlsoWorksWithEnums\" value=\"Bar\"/>\r\n</appSettings>\r\n```\r\n\r\nAny Type the ```System.Convert``` class can handle is accepted, in addition to enums.\r\n\r\n#### Prefer to use without injection? That's fine too.\r\n\r\nPlace this class in your project root for ease of access and call it from anywhere:\r\n\r\n```\r\npublic static class Configuration\r\n{\r\n  public static IAppSettings AppSettings = ConfigMapper.Map<IAppSettings>();\r\n}\r\n```\r\n```\r\nvar myConfigValue = Configuration.AppSettings.MyConfigKey;\r\n```\r\n\r\n#### Connection strings are also handled\r\n\r\n```\r\npublic interface IConnectionStrings\r\n{\r\n    string JustTheConnectionStringItself { get; }\r\n    ConnectionStringSettings AllConnectionStringProperties { get; }\r\n}\r\n```\r\n```\r\nvar cs = ConfigMapper.Map<IConnectionStrings>(MapFrom.ConnectionStrings);\r\n```\r\nSimply match your property names to your connection string names. Use ```string``` property types for simple mappings or ```ConnectionStringSettings``` property types to access the ```ProviderName``` and other properties.\r\n\r\n#### Map from environment variables\r\n\r\nEnvironment variables are mapped at the process level - any user or system environment variables will also be accessible. Include only the variables you need to map in your interface, the rest are ignored.\r\n\r\n```\r\nConfigMapper.Map<IMyEnvironmentVariables>(MapFrom.EnvironmentVariables);\r\n```\r\n\r\n#### Map from custom keys\r\n\r\nConfigMapper will look for a key name matching each property name. To override this, use the ```MapFrom``` attribute\r\n\r\n```\r\n    [MapFrom(\"ActualKey\")]\r\n    string AnythingYouLike { get; }\r\n```\r\n\r\n#### Mark optional properties\r\n\r\nTo be explicit ConfigMapper throws exceptions if it comes across missing keys in your config. You can mark properties as optional if this is actually intentional. To use anything other than the default value for each type you can specify this too, it will be converted from a string to your type like other configuration values.\r\n\r\n```\r\n    [Optional]\r\n    string ThisWillBeNull { get; }\r\n\r\n    [Optional(\"true\")]\r\n    bool ThisDefaultsToTrue { get; }\r\n\r\n```\r\n\r\n#### Efficiency\r\n\r\nConfigMapper is thread-safe, and only one concrete instance from an interface is ever generated, meaning you can call the ```Map<T>``` method any number of times in your code without increased memory usage.\r\n\r\n#### Config Change Handling\r\n\r\nCall ```ConfigMapper.RefreshConfiguration``` if your configuration has changed. Any previously mapped objects will be updated with the latest values from your configuration without needing to re-map them. This works with `appSettings` and `connectionStrings` but not with environment variables.\r\n\r\n#### Licence\r\n\r\nProvided under the [MIT Licence](https://raw.githubusercontent.com/martinjrb/ConfigMapper/master/LICENSE)","google":"UA-54893147-1","note":"Don't delete this file! It's used internally to help with page regeneration."}